char c[256];

strcpy( c, "azerty" ) ;
printf("%s\n",c);
majuscule( c ) ;
printf("%s\n",c);
replace(c,"ER","er");
printf("%s\n",c);

if( exist("README") ) { printf("Exist !\n") ; } else { printf("Not exists !\n"); }

//
// Affichage du repertoire courant
//
getcwd(c, 256); printf("%s\n",c);


//
// Test d'affiche de l'environnement
//
//extern char **environ;

printf("%s\n",environ[0]);

printf("Login:%s\n",getlogin());
printf("PATH:%s\n",getenv("PATH"));

int i;
i=0;
while( environ[i] != NULL ) {
 	printf("%s\n",environ[i]);
 	i++; 
}

//
// Test de la structure tm
//
time_t t;
struct tm *tm ;
t=time(0);
tm = localtime(&t);
printf("%d\n", tm->tm_year+1900 ) ;

//
// Test de cstdlib2/stat.c
//
struct stat sst ; stat("README", &sst ) ; printf("%ld\n", sst.st_size ) ;  printf("%ld\n", sst.st_mtime ) ;

//
// Test de l'encodage base64
//
char buf[1024];
base64_encode( "toto", buf, 4 ) ;
printf( "%s\n", buf) ;
base64_decode( buf );
printf( "%s\n", buf) ;

//
// Test de la fonction printhelp
//
printhelp("various.h");


//
// Test des fonctions MD5
//
MD5Cal("Ceci est la chaîne à évaluer", buf);
printf("md5=%s\n",buf);
MD5CalFile("Makefile",buf);
printf("md5=%s\n",buf);

//
// Test des fonctions Windows
//
MsgBox( "Titre","Ceci est un message" ) ;

E;
